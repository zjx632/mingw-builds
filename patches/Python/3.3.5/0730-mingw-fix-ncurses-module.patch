diff -Naur a/Modules/_cursesmodule.c b/Modules/_cursesmodule.c
--- a/Modules/_cursesmodule.c	2014-03-09 12:40:25.000000000 +0400
+++ b/Modules/_cursesmodule.c	2014-03-17 10:46:51.744400000 +0400
@@ -125,6 +125,10 @@
 #include <langinfo.h>
 #endif
 
+#ifdef __MINGW32__
+#include <windows.h>
+#endif
+
 #if !defined(HAVE_NCURSES_H) && (defined(sgi) || defined(__sun) || defined(SCO5))
 #define STRICT_SYSV_CURSES       /* Don't use ncurses extensions */
 typedef chtype attr_t;           /* No attr_t type is available */
@@ -1699,17 +1703,31 @@
     /* We have to simulate this by writing to a temporary FILE*,
        then reading back, then writing to the argument stream. */
     char fn[100];
+#ifndef MS_WINDOWS
     int fd;
+#endif
     FILE *fp;
     PyObject *res;
 
+#ifndef MS_WINDOWS
+/* Even on unix /tmp may not exist and the program must prefer $TMPDIR ! */
     strcpy(fn, "/tmp/py.curses.putwin.XXXXXX");
     fd = mkstemp(fn);
     if (fd < 0)
         return PyErr_SetFromErrnoWithFilename(PyExc_IOError, fn);
     fp = fdopen(fd, "wb+");
+#else
+    strcpy(fn, "py.curses.putwin.XXXXXX");
+    _mktemp(fn);
+    if (*fn == 0)
+        return PyErr_SetFromErrnoWithFilename(PyExc_IOError, fn);
+    fp = fopen(fn, "wb+");
+#endif
+
     if (fp == NULL) {
+    #ifndef MS_WINDOWS
         close(fd);
+    #endif
         remove(fn);
         return PyErr_SetFromErrnoWithFilename(PyExc_IOError, fn);
     }
@@ -2257,7 +2275,9 @@
 PyCurses_GetWin(PyCursesWindowObject *self, PyObject *stream)
 {
     char fn[100];
+#ifndef MS_WINDOWS
     int fd;
+#endif
     FILE *fp;
     PyObject *data;
     size_t datalen;
@@ -2266,13 +2286,24 @@
 
     PyCursesInitialised;
 
+#ifndef MS_WINDOWS
+/* Even on unix /tmp may not exist and the program must prefer $TMPDIR ! */
     strcpy(fn, "/tmp/py.curses.getwin.XXXXXX");
     fd = mkstemp(fn);
     if (fd < 0)
         return PyErr_SetFromErrnoWithFilename(PyExc_IOError, fn);
     fp = fdopen(fd, "wb+");
+#else
+    strcpy(fn, "py.curses.getwin.XXXXXX");
+    _mktemp(fn);
+    if (*fn == 0)
+        return PyErr_SetFromErrnoWithFilename(PyExc_IOError, fn);
+    fp = fopen(fn, "wb+");
+#endif
     if (fp == NULL) {
+    #ifndef MS_WINDOWS
         close(fd);
+    #endif
         remove(fn);
         return PyErr_SetFromErrnoWithFilename(PyExc_IOError, fn);
     }
