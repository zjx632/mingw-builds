diff -r fe0b71062a71 -r 864eac5c8a2f Makefile.am
--- a/Makefile.am	Mon Jan 20 17:47:44 2014 +0800
+++ b/Makefile.am	Mon Jan 20 13:21:10 2014 +0800
@@ -13,7 +13,7 @@
 libwinpthread_la_SOURCES = \
   src/barrier.h  src/cond.h  src/misc.h  src/mutex.h  src/rwlock.h  src/spinlock.h  src/thread.h  src/ref.h  src/sem.h  src/wpth_ver.h \
   src/barrier.c  src/cond.c  src/misc.c  src/mutex.c  src/rwlock.c  src/spinlock.c  src/thread.c  src/ref.c  src/sem.c  src/sched.c \
-  src/winpthread_internal.h  src/clock.c src/nanosleep.c src/version.rc src/shmem.c
+  src/winpthread_internal.h  src/clock.c src/nanosleep.c src/version.rc
 
 # Break circular dep on bootstrap
 noinst_LIBRARIES = fakelib/libgcc.a  fakelib/libgcc_eh.a  fakelib/libgcc_s.a
diff -r fe0b71062a71 -r 864eac5c8a2f Makefile.in
--- a/Makefile.in	Mon Jan 20 17:47:44 2014 +0800
+++ b/Makefile.in	Mon Jan 20 13:21:10 2014 +0800
@@ -172,8 +172,7 @@
 	src/libwinpthread_la-thread.lo src/libwinpthread_la-ref.lo \
 	src/libwinpthread_la-sem.lo src/libwinpthread_la-sched.lo \
 	src/libwinpthread_la-clock.lo \
-	src/libwinpthread_la-nanosleep.lo src/version.lo \
-    src/libwinpthread_la-shmem.lo
+	src/libwinpthread_la-nanosleep.lo src/version.lo
 libwinpthread_la_OBJECTS = $(am_libwinpthread_la_OBJECTS)
 AM_V_lt = $(am__v_lt_@AM_V@)
 am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
@@ -453,7 +452,7 @@
 libwinpthread_la_SOURCES = \
   src/barrier.h  src/cond.h  src/misc.h  src/mutex.h  src/rwlock.h  src/spinlock.h  src/thread.h  src/ref.h  src/sem.h  src/wpth_ver.h \
   src/barrier.c  src/cond.c  src/misc.c  src/mutex.c  src/rwlock.c  src/spinlock.c  src/thread.c  src/ref.c  src/sem.c  src/sched.c \
-  src/winpthread_internal.h  src/clock.c src/nanosleep.c src/version.rc src/shmem.c
+  src/winpthread_internal.h  src/clock.c src/nanosleep.c src/version.rc
 
 
 # Break circular dep on bootstrap
@@ -664,8 +663,6 @@
 	src/$(DEPDIR)/$(am__dirstamp)
 src/libwinpthread_la-nanosleep.lo: src/$(am__dirstamp) \
 	src/$(DEPDIR)/$(am__dirstamp)
-src/libwinpthread_la-shmem.lo: src/$(am__dirstamp) \
-	src/$(DEPDIR)/$(am__dirstamp)
 src/version.lo: src/$(am__dirstamp) src/$(DEPDIR)/$(am__dirstamp)
 
 libwinpthread.la: $(libwinpthread_la_OBJECTS) $(libwinpthread_la_DEPENDENCIES) $(EXTRA_libwinpthread_la_DEPENDENCIES) 
@@ -690,7 +687,6 @@
 @AMDEP_TRUE@@am__include@ @am__quote@src/$(DEPDIR)/libwinpthread_la-rwlock.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@src/$(DEPDIR)/libwinpthread_la-sched.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@src/$(DEPDIR)/libwinpthread_la-sem.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@src/$(DEPDIR)/libwinpthread_la-shmem.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@src/$(DEPDIR)/libwinpthread_la-spinlock.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@src/$(DEPDIR)/libwinpthread_la-thread.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@src/libgcc/$(DEPDIR)/dll_dependency.Po@am__quote@
@@ -828,14 +824,6 @@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwinpthread_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o src/libwinpthread_la-nanosleep.lo `test -f 'src/nanosleep.c' || echo '$(srcdir)/'`src/nanosleep.c
 
-src/libwinpthread_la-shmem.lo: src/shmem.c
-@am__fastdepCC_TRUE@	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwinpthread_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT src/libwinpthread_la-shmem.lo -MD -MP -MF src/$(DEPDIR)/libwinpthread_la-shmem.Tpo -c -o src/libwinpthread_la-shmem.lo `test -f 'src/shmem.c' || echo '$(srcdir)/'`src/shmem.c
-@am__fastdepCC_TRUE@	$(am__mv) src/$(DEPDIR)/libwinpthread_la-shmem.Tpo src/$(DEPDIR)/libwinpthread_la-shmem.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='src/shmem.c' object='src/libwinpthread_la-shmem.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libwinpthread_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o src/libwinpthread_la-shmem.lo `test -f 'src/shmem.c' || echo '$(srcdir)/'`src/shmem.c
-
-
 mostlyclean-libtool:
 	-rm -f *.lo
 
diff -r fe0b71062a71 -r 864eac5c8a2f src/barrier.c
--- a/src/barrier.c	Mon Jan 20 17:47:44 2014 +0800
+++ b/src/barrier.c	Mon Jan 20 13:21:10 2014 +0800
@@ -28,14 +28,7 @@
 #include "ref.h" 
 #include "misc.h"
 
-#if !(USE_SHMEM)
 static pthread_spinlock_t barrier_global = PTHREAD_SPINLOCK_INITIALIZER;
-#else
-static pthread_spinlock_t barrier_global_shmem_init = PTHREAD_SPINLOCK_INITIALIZER;
-__SHMEM_DEFINE_INIT(pthread_spinlock_t, barrier_global_shmem, barrier_global_shmem_init)
-#define barrier_global __SHMEM_GET(barrier_global_shmem)
-#endif
-
 
 static WINPTHREADS_ATTRIBUTE((noinline)) int
 barrier_unref(volatile pthread_barrier_t *barrier, int res)
diff -r fe0b71062a71 -r 864eac5c8a2f src/cond.c
--- a/src/cond.c	Mon Jan 20 17:47:44 2014 +0800
+++ b/src/cond.c	Mon Jan 20 13:21:10 2014 +0800
@@ -36,7 +36,6 @@
 #include "thread.h"
 #include "misc.h"
 #include "winpthread_internal.h"
-#include "shmem.h"
 
 #include "pthread_compat.h"
 
@@ -84,14 +83,7 @@
 }
 #endif
 
-#if !(USE_SHMEM)
 static pthread_spinlock_t cond_locked = PTHREAD_SPINLOCK_INITIALIZER;
-#else
-static pthread_spinlock_t cond_locked_shmem_init = PTHREAD_SPINLOCK_INITIALIZER;
-__SHMEM_DEFINE_INIT(pthread_spinlock_t, cond_locked_shmem_cond, cond_locked_shmem_init)
-#define cond_locked __SHMEM_GET(cond_locked_shmem_cond)
-#endif
-
 
 static int
 cond_static_init (pthread_cond_t *c)
diff -r fe0b71062a71 -r 864eac5c8a2f src/mutex.c
--- a/src/mutex.c	Mon Jan 20 17:47:44 2014 +0800
+++ b/src/mutex.c	Mon Jan 20 13:21:10 2014 +0800
@@ -28,7 +28,6 @@
 #include "ref.h"
 #include "mutex.h"
 #include "misc.h"
-#include "shmem.h"
 
 extern int do_sema_b_wait_intern (HANDLE sema, int nointerrupt, DWORD timeout);
 static WINPTHREADS_ATTRIBUTE((noinline)) int mutex_static_init(pthread_mutex_t *m);
@@ -37,19 +36,6 @@
 static pthread_spinlock_t mutex_global = PTHREAD_SPINLOCK_INITIALIZER;
 static pthread_spinlock_t mutex_global_static = PTHREAD_SPINLOCK_INITIALIZER;
 
-#if !(USE_SHMEM)
-static pthread_spinlock_t mutex_global = PTHREAD_SPINLOCK_INITIALIZER;
-static pthread_spinlock_t mutex_global_static = PTHREAD_SPINLOCK_INITIALIZER;
-#else
-static pthread_spinlock_t mutex_global_shmem_init = PTHREAD_SPINLOCK_INITIALIZER;
-__SHMEM_DEFINE_INIT(pthread_spinlock_t, mutex_global_shmem, mutex_global_shmem_init)
-#define mutex_global __SHMEM_GET(mutex_global_shmem)
-static pthread_spinlock_t mutex_global_static_shmem_init = PTHREAD_SPINLOCK_INITIALIZER;
-__SHMEM_DEFINE_INIT(pthread_spinlock_t, mutex_global_static_shmem, mutex_global_static_shmem_init)
-#define mutex_global_static __SHMEM_GET(mutex_global_static_shmem)
-#endif
-
-
 static WINPTHREADS_ATTRIBUTE((noinline)) int
 mutex_unref (pthread_mutex_t *m, int r)
 {
@@ -212,14 +198,12 @@
 }
 #endif
 
-__SHMEM_DEFINE_INIT(pthread_mutexattr_t, mxattr_recursive_shmem, PTHREAD_MUTEX_RECURSIVE)
-__SHMEM_DEFINE_INIT(pthread_mutexattr_t, mxattr_errorcheck_shmem, PTHREAD_MUTEX_ERRORCHECK)
-
 static WINPTHREADS_ATTRIBUTE((noinline)) int
 mutex_static_init (pthread_mutex_t *m)
 {
-#define mxattr_recursive __SHMEM_GET(mxattr_recursive_shmem)
-#define mxattr_errorcheck __SHMEM_GET(mxattr_errorcheck_shmem)
+  static pthread_mutexattr_t mxattr_recursive = PTHREAD_MUTEX_RECURSIVE;
+  static pthread_mutexattr_t mxattr_errorcheck = PTHREAD_MUTEX_ERRORCHECK;
+
   int r;
 
   pthread_spin_lock (&mutex_global_static);
@@ -242,8 +226,6 @@
   
   pthread_spin_unlock (&mutex_global_static);
   return r;
-#undef mxattr_recursive
-#undef mxattr_errorcheck
 }
 
 static int pthread_mutex_lock_intern(pthread_mutex_t *m, DWORD timeout);
diff -r fe0b71062a71 -r 864eac5c8a2f src/rwlock.c
--- a/src/rwlock.c	Mon Jan 20 17:47:44 2014 +0800
+++ b/src/rwlock.c	Mon Jan 20 13:21:10 2014 +0800
@@ -28,15 +28,8 @@
 #include "ref.h"
 #include "rwlock.h"
 #include "misc.h"
-#include "shmem.h"
 
-#if !(USE_SHMEM)
 static pthread_spinlock_t rwl_global = PTHREAD_SPINLOCK_INITIALIZER;
-#else
-static pthread_spinlock_t rwl_global_shmem_init = PTHREAD_SPINLOCK_INITIALIZER;
-__SHMEM_DEFINE_INIT(pthread_spinlock_t, rwl_global_shmem, rwl_global_shmem_init)
-#define rwl_global __SHMEM_GET(rwl_global_shmem)
-#endif
 
 static WINPTHREADS_ATTRIBUTE((noinline)) int rwlock_static_init(pthread_rwlock_t *rw);
 
diff -r fe0b71062a71 -r 864eac5c8a2f src/shmem.c
--- a/src/shmem.c	Mon Jan 20 17:47:44 2014 +0800
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,117 +0,0 @@
-/* -- shmem.c --
- *
- * See shmem.h for a description of __SHMEM.
- *
- * This is the win32 implementation of __SHMEM, based in part on a mechanism
- * originally developed by Thomas Pfaff and Adriano dos Santos Fernandes,
- * reimplemented by JohnE as of 2010.
- *
- * This code is released into the public domain without warranty; it may be
- * freely used and redistributed.
- */
-
-
-#include "shmem.h"
-
-
-#if USE_SHMEM
-
-
-#ifndef WIN32_LEAN_AND_MEAN
-# define WIN32_LEAN_AND_MEAN
-#endif
-#include <windows.h>
-#include <malloc.h>
-
-
-static const char* shmem_version_prefix = "gcc-shmem-tdm2";
-
-
-static void __w32sp_trap(void)
-{
-	asm("int $0x3");
-}
-
-
-static void* get_ptr_from_atom(ATOM atom, char* name_buf, int name_buf_len, int ptr_offset)
-{
-	int ptr_len = sizeof(void*) * 8;
-	if (name_buf_len - ptr_offset < ptr_len)
-		__w32sp_trap();
-	if (!GetAtomNameA(atom, name_buf, name_buf_len))
-		__w32sp_trap();
-	size_t ptr = 0;
-	int i = 0;
-	for (; i < ptr_len; ++i)
-	{
-		if (name_buf[ptr_offset + i] == 'A')
-			ptr |= (1 << (ptr_len - i));
-	}
-	return (void*)ptr;
-}
-
-
-void* __SHMEM_CONCAT2(SHMEM_NAMESPACE, grab)(const char* name, int size, void (*initfunc)(void*))
-{
-	int prefix_len = strlen(shmem_version_prefix);
-	int name_len = strlen(name);
-	int ptr_len = sizeof(void*) * 8;
-
-	char full_atom_name[prefix_len + 1 + name_len + 1 + ptr_len + 1];
-
-	memcpy(full_atom_name, shmem_version_prefix, prefix_len);
-	full_atom_name[prefix_len] = '-';
-	memcpy(full_atom_name + prefix_len + 1, name, name_len);
-	memset(full_atom_name + prefix_len + 1 + name_len + 1, 'a', ptr_len);
-	full_atom_name[prefix_len + 1 + name_len + 1 + ptr_len] = 0;
-
-	full_atom_name[prefix_len + 1 + name_len] = 0;
-	HANDLE hmutex = CreateMutexA(0, FALSE, full_atom_name);
-	full_atom_name[prefix_len + 1 + name_len] = '-';
-	if (WaitForSingleObject(hmutex, INFINITE) != WAIT_OBJECT_0)
-		__w32sp_trap();
-
-	ATOM atom = FindAtomA(full_atom_name);
-
-	void* ret = 0;
-
-	if (atom)
-	{
-		ret = get_ptr_from_atom(atom, full_atom_name,
-		 prefix_len + 1 + name_len + 1 + ptr_len, prefix_len + 1 + name_len + 1);
-	}
-	else
-	{
-		void* shared_mem = malloc(size);
-
-		int i = 0;
-		for (; i < ptr_len; ++i)
-		{
-			if ((((size_t)shared_mem) >> (ptr_len - i)) & 1)
-				full_atom_name[prefix_len + 1 + name_len + 1 + i] = 'A';
-		}
-
-		atom = AddAtomA(full_atom_name);
-		if (!atom)
-			__w32sp_trap();
-
-		ret = get_ptr_from_atom(atom, full_atom_name,
-		 prefix_len + 1 + name_len + 1 + ptr_len, prefix_len + 1 + name_len + 1);
-		if (ret == shared_mem)
-		{
-			memset(ret, 0, size);
-			if (initfunc)
-				initfunc(ret);
-		}
-		else
-			free(shared_mem);
-	}
-
-	ReleaseMutex(hmutex);
-	CloseHandle(hmutex);
-
-	return ret;
-}
-
-
-#endif
diff -r fe0b71062a71 -r 864eac5c8a2f src/shmem.h
--- a/src/shmem.h	Mon Jan 20 17:47:44 2014 +0800
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,115 +0,0 @@
-/* -- shmem.h --
- *
- * The __SHMEM mechanism is for sharing named pointers among the instances of a
- * static library compiled into separate modules (binaries or shared libraries)
- * in one runtime program. It's used in libgcc and libstdc++ to be able to
- * propagate exceptions out of shared libraries even which libgcc and libstdc++
- * are compiled in statically.
- *
- * This code is released into the public domain without warranty; it may be
- * freely used and redistributed.
- */
-
-
-#if defined(_WIN32) || defined(_WIN64)
-#define HAVE_SHMEM_IMPL 1
-#else
-#define HAVE_SHMEM_IMPL 0
-#endif
-
-/*
-#if defined(SHARED) || defined(DLL_EXPORT)
-#define USE_SHMEM 0
-#else
-*/
-#define USE_SHMEM 1
-/*
-#endif
-*/
-
-#if HAVE_SHMEM_IMPL && USE_SHMEM
-
-
-#define SHMEM_NAMESPACE __shmem_winpthreads_
-
-
-#ifdef __cplusplus
-#define __SHMEM_CLINK extern "C"
-#else
-#define __SHMEM_CLINK
-#endif
-
-
-#define __SHMEM_CONCAT2(a, b) __CONCAT2_INDIR(a, b)
-#define __CONCAT2_INDIR(a, b) a ## b
-#define __SHMEM_CONCAT3(a, b, c) __CONCAT3_INDIR(a, b, c)
-#define __CONCAT3_INDIR(a, b, c) a ## b ## c
-
-
-__SHMEM_CLINK void* __SHMEM_CONCAT2(SHMEM_NAMESPACE, grab)(const char *name, int size, void (*initfunc)(void *));
-
-
-#define __SHMEM_DEFINE(type, name) \
- type* __SHMEM_CONCAT3(SHMEM_NAMESPACE, ptr_, name) = 0; \
- type* __SHMEM_CONCAT3(SHMEM_NAMESPACE, grabber_, name)(); \
- type* __SHMEM_CONCAT3(SHMEM_NAMESPACE, grabber_, name)() \
- { \
-   return (type*)__SHMEM_CONCAT2(SHMEM_NAMESPACE, grab)(# name, sizeof(type), 0); \
- }
-
-#define __SHMEM_DEFINE_INIT(type, name, initval) \
- type* __SHMEM_CONCAT3(SHMEM_NAMESPACE, ptr_, name) = 0; \
- __SHMEM_CLINK void __SHMEM_CONCAT3(SHMEM_NAMESPACE, init_, name)(void *mem) \
- { \
-   type temp = initval; \
-   *((type*)mem) = temp; \
- } \
- type* __SHMEM_CONCAT3(SHMEM_NAMESPACE, grabber_, name)() \
- { \
-   return (type*)__SHMEM_CONCAT2(SHMEM_NAMESPACE, grab)(# name, sizeof(type), __SHMEM_CONCAT3(SHMEM_NAMESPACE, init_, name)); \
- }
-
-#define __SHMEM_DEFINE_ARRAY(type, name, size) \
- type* __SHMEM_CONCAT3(SHMEM_NAMESPACE, ptr_, name) = 0; \
- type* __SHMEM_CONCAT3(SHMEM_NAMESPACE, grabber_, name)() \
- { \
-   return (type*)__SHMEM_CONCAT2(SHMEM_NAMESPACE, grab)(# name, sizeof(type) * size, 0); \
- }
-
-
-#define __SHMEM_DECLARE(type, name) \
- extern type* __SHMEM_CONCAT3(SHMEM_NAMESPACE, ptr_, name); \
- type* __SHMEM_CONCAT3(SHMEM_NAMESPACE, grabber_, name)();
-
-
-#define __SHMEM_GET(name) \
- (*( \
- (__SHMEM_CONCAT3(SHMEM_NAMESPACE, ptr_, name)) \
- ? \
- (__SHMEM_CONCAT3(SHMEM_NAMESPACE, ptr_, name)) \
- : \
- ((__SHMEM_CONCAT3(SHMEM_NAMESPACE, ptr_, name)) = __SHMEM_CONCAT3(SHMEM_NAMESPACE, grabber_, name)()) \
- ))
-
-#define __SHMEM_GET_ARRAY(name) \
- ( \
- (__SHMEM_CONCAT3(SHMEM_NAMESPACE, ptr_, name)) \
- ? \
- (__SHMEM_CONCAT3(SHMEM_NAMESPACE, ptr_, name)) \
- : \
- ((__SHMEM_CONCAT3(SHMEM_NAMESPACE, ptr_, name)) = __SHMEM_CONCAT3(SHMEM_NAMESPACE, grabber_, name)()) \
- )
-
-
-#else
-
-
-#define __SHMEM_DEFINE(type, name) type name;
-#define __SHMEM_DEFINE_INIT(type, name, initval) type name = initval;
-#define __SHMEM_DEFINE_ARRAY(type, name, size) type name[size];
-#define __SHMEM_DECLARE(type, name) extern type name;
-#define __SHMEM_GET(name) name
-#define __SHMEM_GET_ARRAY(name) name
-
-
-#endif
diff -r fe0b71062a71 -r 864eac5c8a2f src/spinlock.c
--- a/src/spinlock.c	Mon Jan 20 17:47:44 2014 +0800
+++ b/src/spinlock.c	Mon Jan 20 13:21:10 2014 +0800
@@ -25,7 +25,6 @@
 #include <malloc.h>
 #include "pthread.h"
 #include "misc.h"
-#include "shmem.h"
 
 /* In theory, owner and locks are in CRITICAL_SECTION as well.
 In practise, however, the implementation of CRITICAL_SECTION
@@ -41,8 +40,7 @@
 use a spin count of 4000. */
 static const DWORD kSpinCount = 4000;
 
-__SHMEM_DEFINE_INIT(LONG, global_lock_shmem, 0)
-#define global_lock __SHMEM_GET(global_lock_shmem)
+static volatile LONG global_lock = 0;
 
 static void
 enter_global_cs (void)
diff -r fe0b71062a71 -r 864eac5c8a2f src/thread.c
--- a/src/thread.c	Mon Jan 20 17:47:44 2014 +0800
+++ b/src/thread.c	Mon Jan 20 13:21:10 2014 +0800
@@ -28,48 +28,29 @@
 #include "thread.h"
 #include "misc.h"
 #include "winpthread_internal.h"
-#include "shmem.h"
 
 static _pthread_v *__pthread_self_lite (void);
 
-typedef void (**pthread_key_dest_func_ptr)(void *);
-__SHMEM_DEFINE(pthread_key_dest_func_ptr, _pthread_key_dest_shmem)
-#define _pthread_key_dest __SHMEM_GET(_pthread_key_dest_shmem)
+void (**_pthread_key_dest)(void *) = NULL;
 
-__SHMEM_DEFINE(long, _pthread_cancelling_shmem)
-#define _pthread_cancelling __SHMEM_GET(_pthread_cancelling_shmem)
-__SHMEM_DEFINE(int, _pthread_concur_shmem)
-#define _pthread_concur __SHMEM_GET(_pthread_concur_shmem)
+static volatile long _pthread_cancelling;
+static int _pthread_concur;
 
 /* FIXME Will default to zero as needed */
-__SHMEM_DEFINE(pthread_once_t, _pthread_tls_once_shmem)
-#define _pthread_tls_once __SHMEM_GET(_pthread_tls_once_shmem)
-__SHMEM_DEFINE_INIT(DWORD, _pthread_tls_shmem, 0xffffffff)
-#define _pthread_tls __SHMEM_GET(_pthread_tls_shmem)
+static pthread_once_t _pthread_tls_once;
+static DWORD _pthread_tls = 0xffffffff;
 
-__SHMEM_DEFINE_INIT(pthread_rwlock_t, _pthread_key_lock_shmem, PTHREAD_RWLOCK_INITIALIZER)
-#define _pthread_key_lock __SHMEM_GET(_pthread_key_lock_shmem)
-__SHMEM_DEFINE(unsigned long, _pthread_key_max_shmem)
-#define _pthread_key_max __SHMEM_GET(_pthread_key_max_shmem)
-__SHMEM_DEFINE(unsigned long, _pthread_key_sch_shmem)
-#define _pthread_key_sch __SHMEM_GET(_pthread_key_sch_shmem)
+static pthread_rwlock_t _pthread_key_lock = PTHREAD_RWLOCK_INITIALIZER;
+static unsigned long _pthread_key_max=0L;
+static unsigned long _pthread_key_sch=0L;
 
+static _pthread_v *pthr_root = NULL, *pthr_last = NULL;
+static pthread_mutex_t mtx_pthr_locked = PTHREAD_RECURSIVE_MUTEX_INITIALIZER;
 
-__SHMEM_DEFINE(_pthread_v*, pthr_root_shmem)
-#define pthr_root __SHMEM_GET(pthr_root_shmem)
-__SHMEM_DEFINE(_pthread_v*, pthr_last_shmem)
-#define pthr_last __SHMEM_GET(pthr_last_shmem)
-__SHMEM_DEFINE_INIT(pthread_mutex_t, mtx_pthr_locked_shmem, PTHREAD_RECURSIVE_MUTEX_INITIALIZER)
-#define mtx_pthr_locked __SHMEM_GET(mtx_pthr_locked_shmem)
-
-__SHMEM_DEFINE(__pthread_idlist*, idList_shmem)
-#define idList __SHMEM_GET(idList_shmem)
-__SHMEM_DEFINE(size_t, idListCnt_shmem)
-#define idListCnt __SHMEM_GET(idListCnt_shmem)
-__SHMEM_DEFINE(size_t, idListMax_shmem)
-#define idListMax __SHMEM_GET(idListMax_shmem)
-__SHMEM_DEFINE(pthread_t, idListNextId_shmem)
-#define idListNextId __SHMEM_GET(idListNextId_shmem)
+static __pthread_idlist *idList = NULL;
+static size_t idListCnt = 0;
+static size_t idListMax = 0;
+static pthread_t idListNextId = 0;
 
 /* Search the list idList for an element with identifier ID.  If
    found, its associated _pthread_v pointer is returned, otherwise
@@ -447,16 +428,9 @@
   struct collect_once_t *next;
 } collect_once_t;
 
-__SHMEM_DEFINE(collect_once_t*, once_obj_shmem)
-#define once_obj __SHMEM_GET(once_obj_shmem)
+static collect_once_t *once_obj = NULL;
 
-#if !(USE_SHMEM)
 static pthread_spinlock_t once_global = PTHREAD_SPINLOCK_INITIALIZER;
-#else
-static pthread_spinlock_t once_global_shmem_init = PTHREAD_SPINLOCK_INITIALIZER;
-__SHMEM_DEFINE_INIT(pthread_spinlock_t, once_global_shmem, once_global_shmem_init)
-#define once_global __SHMEM_GET(once_global_shmem)
-#endif
 
 static collect_once_t *
 enterOnceObject (pthread_once_t *o)
@@ -1677,8 +1651,7 @@
   return r;
 }
 
-__SHMEM_DEFINE(int, dummy_concurrency_level_shmem)
-#define dummy_concurrency_level __SHMEM_GET(dummy_concurrency_level_shmem)
+static int dummy_concurrency_level = 0;
 
 int
 pthread_getconcurrency (void)
